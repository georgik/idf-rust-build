name: build-idf-rust-dispatch

# on:
#   push:
#     tags:
#     - 'v*'

on:
  workflow_dispatch

jobs:
  # create_release:
  #   name: Create release
  #   runs-on: ubuntu-18.04
  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  get_release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
          route: GET /repos/:repository/releases/latest
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}

  build-idf-rust:
    name: Build IDF Rust for ${{ matrix.os }}
    # needs: create_release
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, self-hosted-macos-arm64, ubuntu-latest, windows-latest]
        #os: [macos-latest, ubuntu-18.04 ]
        #os: [macos-latest, ubuntu-18.04, windows-latest]
        #os: [ubuntu-18.04]
        #os: [windows-latest]
        # os: [macos-latest]
        # os: [ [self-hosted, Windows, X64] ]
        # os: [ [self-hosted, macOS, M1] ]
        os: [ windows-self-hosted, macos-m1-self-hosted ]
        include:
        # - os: macos-latest
        #   ARCH: ''
        #   TARGET: macos-x64
        #   ASSET_PATH: 'build/dist/rust-1.54.0-dev-x86_64-apple-darwin.tar.xz'
        #   ASSET_NAME: 'rust-1.54.0-dev-x86_64-x86_64-apple-darwin.tar.xz'
        #   ASSET_CONTENT_TYPE: 'application/x-tar'
        # - os: ubuntu-18.04
        #   ARCH: ''
        #   TARGET: linux-x64
        #   ASSET_PATH: 'build/dist/rust-1.54.0-dev-x86_64-unknown-linux-gnu.tar.xz'
        #   ASSET_NAME: 'rust-1.54.0-dev-x86_64-unknown-linux-gnu.tar.xz'
        #   ASSET_CONTENT_TYPE: 'application/x-tar'
        #- os: windows-latest
        #  ARCH: ''
        #  TARGET: win-x64
        #  ASSET_PATH: 'build/dist/esp.zip'
        #  ASSET_NAME: 'rust-1.54.0-dev-x86_64-pc-windows-msvc.zip'
        #  ASSET_CONTENT_TYPE: 'application/zip'
        - os: windows-self-hosted
          ARCH: ''
          TARGET: win-x64
          ASSET_PATH: 'build/dist/esp.zip'
          ASSET_NAME: 'rust-1.54.0-dev-x86_64-pc-windows-msvc.zip'
          ASSET_CONTENT_TYPE: 'application/zip'
        - os: macos-m1-self-hosted
          ARCH: ''
          TARGET: win-x64
          ASSET_PATH: 'build/dist/rust-1.54.0-dev-aarch64-apple-darwin.tar.xz'
          ASSET_NAME: 'rust-1.54.0-dev-aarch64-apple-darwin.tar.xz'
          ASSET_CONTENT_TYPE: 'application/x-tar'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: esp-rs/rust
          ref: esp
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup Ninja
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@master
      #- name: Prepare binary artifact of espressif/llvm-project
      #  run: |
      #      mkdir llvm
      #      wget --quiet https://github.com/georgik/idf-llvm-build/releases/download/v11.0.0/llvm-11.0.0-${{ matrix.TARGET }}.tar.xz
      #      tar xf llvm-11.0.0-${{ matrix.target }}.tar.xz
      - name: Prepare build
        run: python3 src/bootstrap/configure.py --experimental-targets=Xtensa --enable-extended --tools=rustfmt --dist-compression-formats='xz'
        # run: python3 src/bootstrap/configure.py --llvm-root=llvm --experimental-targets=Xtensa --enable-extended --tools=rustfmt --dist-compression-formats='xz'
        # run: ./configure --experimental-targets=Xtensa --enable-extended --tools=rustfmt --dist-compression-formats='xz'
      - name: Build with x.py - only components
        if: ${{ matrix.os == 'windows-latest' || matrix.os == 'windows-self-hosted' }}
        run: |
          python3 x.py build compiler/rustc src/tools/rustfmt library/std --stage 2
          python3 x.py dist src --stage 2
      - name: Build with x.py - dist packages
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' }}
        run: python3 x.py dist --stage 2 --exclude src/doc
      - name: Dist bundle for Windows
        if: ${{ matrix.os == 'windows-latest' || matrix.os == 'windows-self-hosted' }}
        shell: bash
        run: |
          mkdir -p build/dist/esp
          cp -r build/x86_64-pc-windows-msvc/stage2/* build/dist/esp
          tar xf ../rust-src-1.54.0-dev.tar.xz
          cp -r rust-src-1.54.0-dev/* build/dist/esp
          cd build/dist
          find . -name '*.pdb' -delete
          zip -r esp.zip esp
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: ${{ matrix.ASSET_PATH }}
          asset_name: ${{ matrix.ASSET_NAME }}
          # asset_path: build/dist/rust-1.54.0-dev-aarch64-apple-darwin.tar.xz
          # asset_name: rust-1.54.0-dev-aarch64-apple-darwin.tar.xz
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}

